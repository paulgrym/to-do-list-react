{"version":3,"sources":["globalStyles.js","features/tasks/Form/styled.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/Form/index.js","features/tasks/TaskList/styled.js","features/tasks/TaskList/index.js","common/Section/styled.js","common/Section/index.js","common/Header/styled.js","common/Header/index.js","common/Container/index.js","features/tasks/Buttons/index.js","features/tasks/FormButtons/index.js","features/tasks/TaskListButtons/index.js","features/tasks/Tasks.js","App.js","reportWebVitals.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","StyledForm","styled","form","theme","breakpoints","medium","Input","input","Button","button","colors","primaryColor","hoverColor","activeColor","localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","loading","reducers","addTask","newTask","payload","push","toggleHideDone","state","toggleTaskDone","taskId","index","findIndex","task","id","done","removeTask","splice","setAllDone","fetchExampleTasks","setExampleTasks","actions","selectTasksState","selectTasks","selectHideDone","selectIsEveryTaskDone","every","selectIsEveryTaskUndone","selectAreTasksEmpty","length","selectIsLoading","Form","dispatch","useDispatch","useState","newTaskContent","setNewTaskContent","inputRef","useRef","onSubmit","event","preventDefault","trim","content","nanoid","value","onChange","target","placeholder","ref","autoFocus","onClick","current","focus","List","ul","ListItem","li","hidden","css","TaskContent","span","remove","TaskList","useSelector","map","StyledSection","section","Header","header","small","Title","h2","Section","title","body","extraHeaderContent","h1","Container","main","StyledButtons","div","FormButtons","isLoading","disabled","TaskListButtons","isEveryTaskDone","isEveryTaskUndone","areTasksEmpty","Tasks","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandeler","tasksSaga","delay","call","exampleTasks","exampleTasksWithIds","exampleTask","put","alert","select","takeLatest","type","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aaaedcfe.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html {\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  *, ::after, ::before {\r\n    box-sizing: inherit;\r\n  }\r\n\r\n  body {\r\n    font-family: 'Montserrat', sans-serif;\r\n    background-color: #eee;\r\n    margin: 0 20px;\r\n    word-break: break-all;\r\n  }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n  display: flex;\r\n  padding: 20px;\r\n\r\n  @media (max-width:${({ theme }) => theme.breakpoints.medium}px) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  flex-grow: 1;\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  background-color: ${({ theme }) => theme.colors.primaryColor};\r\n  color: white;\r\n  border: none;\r\n  padding: 10px;\r\n  margin-left: 20px;\r\n  transition: background-color 0.3s, transform 0.3s;\r\n\r\n  @media (max-width:${({ theme }) => theme.breakpoints.medium}px) {\r\n    margin-left: 0;\r\n    margin-top: 10px;\r\n  }\r\n\r\n  &:hover {\r\n    background-color: ${({ theme }) => theme.colors.hoverColor};\r\n    cursor: pointer;\r\n    transform: scale(1.1);\r\n\r\n    @media (max-width:${({ theme }) => theme.breakpoints.medium}px) {\r\n      transform: scale(1.05);\r\n    }\r\n  }\r\n\r\n  &:active {\r\n    background-color: ${({ theme }) => theme.colors.activeColor};\r\n  }\r\n`;\r\n","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = tasks => \r\nlocalStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocaleStorage = () => \r\nJSON.parse(localStorage.getItem(localStorageKey)) || [];","import { createSlice } from '@reduxjs/toolkit';\r\nimport { getTasksFromLocaleStorage } from './tasksLocalStorage';\r\n\r\nconst tasksSlice = createSlice({\r\n  name: 'tasks',\r\n  initialState: {\r\n    tasks: getTasksFromLocaleStorage(),\r\n    hideDone: false,\r\n    loading: false,\r\n  },\r\n  reducers: {\r\n    addTask: ({ tasks }, { payload: newTask }) => {\r\n      tasks.push(newTask);\r\n    },\r\n    toggleHideDone: state => {\r\n      state.hideDone = !state.hideDone;\r\n    },\r\n    toggleTaskDone: ({ tasks }, { payload: taskId }) => {\r\n      const index = tasks.findIndex(task => task.id === taskId);\r\n      tasks[index].done = !tasks[index].done;\r\n    },\r\n    removeTask: ({ tasks }, { payload: taskId }) => {\r\n      const index = tasks.findIndex(task => task.id === taskId);\r\n      tasks.splice(index, 1);\r\n    },\r\n    setAllDone: ({ tasks }) => {\r\n      for (const task of tasks) {\r\n        task.done = true\r\n      }\r\n    },\r\n    fetchExampleTasks: (state) => { state.loading = true },\r\n    setExampleTasks: (state, { payload: tasks }) => {\r\n      state.tasks.push(...tasks);\r\n      state.loading = false;\r\n    }\r\n  },\r\n});\r\n\r\nexport const {\r\n  addTask,\r\n  toggleHideDone,\r\n  toggleTaskDone,\r\n  removeTask,\r\n  setAllDone,\r\n  fetchExampleTasks,\r\n  setExampleTasks\r\n} = tasksSlice.actions;\r\n\r\nexport const selectTasksState = state => state.tasks;\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectIsEveryTaskDone = state => selectTasks(state).every(({ done }) => done);\r\nexport const selectIsEveryTaskUndone = state => selectTasks(state).every(({ done }) => !done);\r\nexport const selectAreTasksEmpty = state => selectTasks(state).length === 0;\r\nexport const selectIsLoading = state => selectTasksState(state).loading === true;\r\n\r\nexport default tasksSlice.reducer;\r\n","import { nanoid } from \"@reduxjs/toolkit\";\r\nimport { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { StyledForm, Input, Button } from \"./styled\"\r\nimport { addTask } from \"../tasksSlice\";\r\n\r\nconst Form = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n\r\n  const focusInput = () => {\r\n    inputRef.current.focus();\r\n  }\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    const trimmedNewTaskContent = newTaskContent.trim();\r\n    if (trimmedNewTaskContent === \"\") {\r\n      return;\r\n    };\r\n\r\n    dispatch(addTask({\r\n      content: newTaskContent,\r\n      done: false,\r\n      id: nanoid(),\r\n    }))\r\n    setNewTaskContent(\"\");\r\n  };\r\n\r\n  return (\r\n    <StyledForm onSubmit={onFormSubmit}>\r\n      <Input\r\n        value={newTaskContent}\r\n        onChange={(event) => setNewTaskContent(event.target.value)}\r\n        placeholder=\"Co jest do zrobienia?\"\r\n        ref={inputRef}\r\n        autoFocus\r\n      />\r\n      <Button onClick={focusInput}>\r\n        Dodaj zadanie\r\n      </Button>\r\n    </StyledForm>\r\n  )\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n  padding: 0 20px 20px;\r\n  margin-top: 20px;\r\n`;\r\n\r\nexport const ListItem = styled.li`\r\n  list-style-type: none;\r\n  border-bottom: 1px solid #ddd;\r\n  padding: 10px;\r\n  display: grid;\r\n  grid-template-columns: auto 1fr auto;\r\n  grid-gap: 10px;\r\n  align-items: center;\r\n\r\n  ${({ hidden }) => hidden && css`\r\n    display:none;\r\n  `}\r\n`;\r\n\r\nexport const TaskContent = styled.span`\r\n  ${({ done }) => done && css`\r\n    text-decoration:line-through;\r\n  `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  height: 30px;\r\n  width: 30px;\r\n  background-color: hsl(120, 88%, 27%);\r\n  color: white;\r\n  justify-self: center;\r\n  border: none;\r\n  transition: 0.4s;\r\n\r\n  &:hover {\r\n  background-color: hsl(120, 88%, 32%);\r\n  cursor: pointer;\r\n  }\r\n\r\n  &:active {\r\n    background-color: hsl(120, 88%, 37%);\r\n  }\r\n\r\n  ${({ remove }) => remove && css`\r\n    background-color: hsl(0, 93%, 58%);\r\n\r\n    &:hover {\r\n      background-color: hsl(0, 93%, 63%);\r\n    }\r\n\r\n    &:active {\r\n      background-color: hsl(0, 93%, 68%);\r\n    }\r\n  `}\r\n`;","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { toggleTaskDone, removeTask, selectTasks, selectHideDone } from \"../tasksSlice\";\r\nimport { List, ListItem, TaskContent, Button } from \"./styled\";\r\n\r\nconst TaskList = () => {\r\n  const tasks = useSelector(selectTasks);\r\n  const hideDone = useSelector(selectHideDone);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <List>\r\n      {tasks.map(task => (\r\n        <ListItem\r\n          key={task.id}\r\n          hidden={task.done && hideDone}\r\n        >\r\n          <Button\r\n            onClick={() => dispatch(toggleTaskDone(task.id))}\r\n          >\r\n            {task.done ? \"✔\" : \"\"}\r\n          </Button>\r\n          <TaskContent done={task.done}>\r\n            {task.content}\r\n          </TaskContent>\r\n          <Button\r\n            remove\r\n            onClick={() => dispatch(removeTask(task.id))}\r\n          >\r\n            🗑\r\n          </Button>\r\n        </ListItem>\r\n      ))}\r\n    </List>\r\n  );\r\n}\r\n\r\nexport default TaskList;","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n  background-color: white;\r\n  box-shadow: 1px -1px 5px 0px #DDDDDD;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n  display: flex;\r\n  border-bottom: 1px solid #ddd;\r\n  margin-top: 10px;\r\n  padding: 0 20px;\r\n\r\n  @media (max-width:${({ theme }) => theme.breakpoints.small}px) {\r\n    flex-direction: column;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n  padding: 20px 0;\r\n  margin: 0;\r\n  font-size: 20px;\r\n`;","import { StyledSection, Header, Title } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n  <StyledSection>\r\n    <Header>\r\n      <Title>{title}</Title>\r\n      {extraHeaderContent}\r\n    </Header>\r\n    {body}\r\n  </StyledSection>\r\n);\r\n\r\nexport default Section;","import styled from \"styled-components\";\r\n\r\nexport const Title = styled.h1`\r\n  margin: 30px 0 20px;\r\n`;\r\n","import { Title } from \"./styled\";\r\n\r\nconst Header = ({ title }) => (\r\n  <header>\r\n    <Title>{title}</Title>\r\n  </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.main`\r\n  max-width: 850px;\r\n  margin: 0 auto;\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const StyledButtons = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-end;\r\n  flex-grow: 1;\r\n\r\n  @media (max-width:${({ theme }) => theme.breakpoints.small}px) {\r\n    flex-direction: column;\r\n    margin-bottom: 20px;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  border: none;\r\n  background-color: inherit;\r\n  color: ${({ theme }) => theme.colors.primaryColor};\r\n  padding: 10px 0;\r\n  margin: 0 0 0 20px;\r\n  transition: color 0.4s;\r\n\r\n  &:hover {\r\n    color: ${({ theme }) => theme.colors.hoverColor};\r\n    cursor: pointer;\r\n  }\r\n\r\n  &:disabled {\r\n    color: #c0c0c5;\r\n  }\r\n\r\n  @media (max-width:${({ theme }) => theme.breakpoints.small}px) {\r\n    margin: 0;\r\n  }\r\n`;\r\n","import { fetchExampleTasks, selectIsLoading } from \"../tasksSlice\"\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Button, StyledButtons } from \"../Buttons\";\r\n\r\nconst FormButtons = () => {\r\n  const isLoading = useSelector(selectIsLoading);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <StyledButtons>\r\n      <Button\r\n        onClick={() => dispatch(fetchExampleTasks())}\r\n        disabled={isLoading}\r\n      >\r\n        {isLoading ? \"Ładowanie...\" : \"Pobierz przykładowe zadania\"}\r\n      </Button>\r\n    </StyledButtons>\r\n  );\r\n};\r\n\r\nexport default FormButtons;","import { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  toggleHideDone,\r\n  setAllDone,\r\n  selectIsEveryTaskDone,\r\n  selectIsEveryTaskUndone,\r\n  selectHideDone,\r\n  selectAreTasksEmpty,\r\n} from \"../tasksSlice\";\r\nimport { Button, StyledButtons } from \"../Buttons\"\r\n\r\nconst TaskListButtons = () => {\r\n  const hideDone = useSelector(selectHideDone);\r\n  const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\r\n  const isEveryTaskUndone = useSelector(selectIsEveryTaskUndone);\r\n  const areTasksEmpty = useSelector(selectAreTasksEmpty);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <StyledButtons>\r\n      {!areTasksEmpty && (\r\n        <>\r\n          <Button\r\n            onClick={() => dispatch(toggleHideDone())}\r\n            disabled={isEveryTaskUndone}\r\n          >\r\n            {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n          </Button>\r\n          <Button\r\n            onClick={() => dispatch(setAllDone())}\r\n            disabled={isEveryTaskDone}\r\n          >\r\n            Ukończ wszystkie\r\n          </Button>\r\n        </>\r\n      )}\r\n    </StyledButtons>\r\n  )\r\n};\r\n\r\nexport default TaskListButtons;","import Form from \"./Form\";\nimport TaskList from \"./TaskList\";\nimport Section from \"../../common/Section\";\nimport Header from \"../../common/Header\";\nimport { Container } from \"../../common/Container\";\nimport FormButtons from \"./FormButtons\";\nimport TaskListButtons from \"./TaskListButtons\";\n\nconst Tasks = () => {\n\n  return (\n    <Container>\n      <Header title=\"Lista zadań\" />\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={<Form />}\n        extraHeaderContent={<FormButtons />}\n      />\n\n      <Section\n        title=\"Lista zadań\"\n        body={<TaskList />}\n        extraHeaderContent={<TaskListButtons />}\n      />\n    </Container>\n  );\n}\n\nexport default Tasks;\n","import Tasks from \"./features/tasks/Tasks\";\r\n\r\nconst App = () => <Tasks />;\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const getExampleTasks = async () => {\r\n  const response = await fetch(\"to-do-list-react/exampleTasks.json\");\r\n\r\n  if (!response.ok) {\r\n    throw new Error(response.statusText);\r\n  };\r\n\r\n  return await response.json();\r\n}","import { takeLatest, takeEvery, call, put, delay, select } from \"redux-saga/effects\";\r\nimport { fetchExampleTasks, selectTasks, setExampleTasks } from \"./tasksSlice\";\r\nimport { getExampleTasks } from \"./getExampleTasks\"\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n  try {\r\n    yield delay(1000);\r\n    const exampleTasks = yield call(getExampleTasks);\r\n    const exampleTasksWithIds = exampleTasks.map(exampleTask => ({\r\n      ...exampleTask,\r\n      id: nanoid(),\r\n    }));\r\n    yield put(setExampleTasks(exampleTasksWithIds));\r\n  } catch (error) {\r\n    yield call(alert, \"Coś poszło nie tak\")\r\n  }\r\n};\r\n\r\nfunction* saveTasksInLocalStorageHandeler() {\r\n  const tasks = yield select(selectTasks);\r\n  yield call(saveTasksInLocalStorage, tasks);\r\n};\r\n\r\nexport function* tasksSaga() {\r\n  yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n  yield takeEvery(\"*\", saveTasksInLocalStorageHandeler);\r\n};\r\n","import { all } from \"redux-saga/effects\";\r\nimport { tasksSaga } from \"./features/tasks/tasksSaga\";\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    tasksSaga(),\r\n  ]);\r\n};","import { configureStore } from '@reduxjs/toolkit';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\nimport rootSaga from './rootSaga';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    tasks: tasksReducer,\r\n  },\r\n  middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GlobalStyle } from './globalStyles';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider } from 'styled-components';\nimport { theme } from \"./theme\";\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode >,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n  colors: {\r\n    primaryColor: \"hsl(180, 100%, 25%)\",\r\n    hoverColor: \"hsl(180, 100%, 30%)\",\r\n    activeColor: \"hsl(180, 100%, 35%)\"\r\n  },\r\n  breakpoints: {\r\n    medium: 768,\r\n    small: 540\r\n  }\r\n}"],"sourceRoot":""}