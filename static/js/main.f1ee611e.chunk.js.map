{"version":3,"sources":["globalStyles.js","features/tasks/Form/styled.js","features/tasks/tasksSlice.js","features/tasks/Form/index.js","features/tasks/TaskList/styled.js","features/tasks/TaskList/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/styled.js","common/Header/index.js","common/Container/index.js","features/tasks/Tasks.js","App.js","reportWebVitals.js","store.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","StyledForm","styled","form","theme","breakpoints","medium","Input","input","Button","button","colors","primaryColor","hoverColor","activeColor","tasksSlice","createSlice","name","initialState","tasks","hideDone","reducers","addTask","state","action","push","payload","toggleHideDone","toggleTaskDone","index","findIndex","task","id","done","removeTask","splice","setAllDone","actions","selectTasks","Form","dispatch","useDispatch","useState","newTaskContent","setNewTaskContent","inputRef","useRef","onSubmit","event","preventDefault","trim","content","nanoid","value","onChange","target","placeholder","ref","autoFocus","onClick","current","focus","List","ul","ListItem","li","hidden","css","TaskContent","span","remove","TaskList","useSelector","map","StyledButtons","div","small","Buttons","length","disabled","every","StyledSection","section","Header","header","Title","h2","Section","title","body","extraHeaderContent","h1","Container","main","Tasks","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","tasksReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.f1ee611e.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html {\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  *, ::after, ::before {\r\n    box-sizing: inherit;\r\n  }\r\n\r\n  body {\r\n    font-family: 'Montserrat', sans-serif;\r\n    background-color: #eee;\r\n    margin: 0 20px;\r\n    word-break: break-all;\r\n  }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n  display: flex;\r\n  padding: 20px;\r\n\r\n  @media (max-width:${({ theme }) => theme.breakpoints.medium}px) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  flex-grow: 1;\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  background-color: ${({ theme }) => theme.colors.primaryColor};\r\n  color: white;\r\n  border: none;\r\n  padding: 10px;\r\n  margin-left: 20px;\r\n  transition: background-color 0.3s, transform 0.3s;\r\n\r\n  @media (max-width:${({ theme }) => theme.breakpoints.medium}px) {\r\n    margin-left: 0;\r\n    margin-top: 10px;\r\n  }\r\n\r\n  &:hover {\r\n    background-color: ${({ theme }) => theme.colors.hoverColor};\r\n    cursor: pointer;\r\n    transform: scale(1.1);\r\n\r\n    @media (max-width:${({ theme }) => theme.breakpoints.medium}px) {\r\n      transform: scale(1.05);\r\n    }\r\n  }\r\n\r\n  &:active {\r\n    background-color: ${({ theme }) => theme.colors.activeColor};\r\n  }\r\n`;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst tasksSlice = createSlice({\r\n  name: 'tasks',\r\n  initialState: {\r\n    tasks: [],\r\n    hideDone: false,\r\n  },\r\n  reducers: {\r\n    addTask: (state, action) => {\r\n      state.tasks.push(action.payload);\r\n    },\r\n    toggleHideDone: state => {\r\n      state.hideDone = !state.hideDone;\r\n    },\r\n    toggleTaskDone: (state, action) => {\r\n      const index = state.tasks.findIndex(task => task.id === action.payload);\r\n      state.tasks[index].done = !state.tasks[index].done;\r\n    },\r\n    removeTask: (state, action) => {\r\n      const index = state.tasks.findIndex(task => task.id === action.payload);\r\n      state.tasks.splice(index, 1);\r\n    },\r\n    setAllDone: (state) => {\r\n      for (const task of state.tasks) {\r\n        task.done = true\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addTask, toggleHideDone, toggleTaskDone, removeTask, setAllDone } = tasksSlice.actions;\r\nexport const selectTasks = state => state.tasks;\r\nexport default tasksSlice.reducer;","import { nanoid } from \"@reduxjs/toolkit\";\r\nimport { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { StyledForm, Input, Button } from \"./styled\"\r\nimport { addTask } from \"../tasksSlice\";\r\n\r\nconst Form = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n\r\n  const focusInput = () => {\r\n    inputRef.current.focus();\r\n  }\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    const trimmedNewTaskContent = newTaskContent.trim();\r\n    if (trimmedNewTaskContent === \"\") {\r\n      return;\r\n    };\r\n\r\n    dispatch(addTask({\r\n      content: newTaskContent,\r\n      done: false,\r\n      id: nanoid(),\r\n    }))\r\n    setNewTaskContent(\"\");\r\n  };\r\n\r\n  return (\r\n    <StyledForm onSubmit={onFormSubmit}>\r\n      <Input\r\n        value={newTaskContent}\r\n        onChange={(event) => setNewTaskContent(event.target.value)}\r\n        placeholder=\"Co jest do zrobienia?\"\r\n        ref={inputRef}\r\n        autoFocus\r\n      />\r\n      <Button onClick={focusInput}>\r\n        Dodaj zadanie\r\n      </Button>\r\n    </StyledForm>\r\n  )\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n  padding: 0 20px 20px;\r\n  margin-top: 20px;\r\n`;\r\n\r\nexport const ListItem = styled.li`\r\n  list-style-type: none;\r\n  border-bottom: 1px solid #ddd;\r\n  padding: 10px;\r\n  display: grid;\r\n  grid-template-columns: auto 1fr auto;\r\n  grid-gap: 10px;\r\n  align-items: center;\r\n\r\n  ${({ hidden }) => hidden && css`\r\n    display:none;\r\n  `}\r\n`;\r\n\r\nexport const TaskContent = styled.span`\r\n  ${({ done }) => done && css`\r\n    text-decoration:line-through;\r\n  `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  height: 30px;\r\n  width: 30px;\r\n  background-color: hsl(120, 88%, 27%);\r\n  color: white;\r\n  justify-self: center;\r\n  border: none;\r\n  transition: 0.4s;\r\n\r\n  &:hover {\r\n  background-color: hsl(120, 88%, 32%);\r\n  cursor: pointer;\r\n  }\r\n\r\n  &:active {\r\n    background-color: hsl(120, 88%, 37%);\r\n  }\r\n\r\n  ${({ remove }) => remove && css`\r\n    background-color: hsl(0, 93%, 58%);\r\n\r\n    &:hover {\r\n      background-color: hsl(0, 93%, 63%);\r\n    }\r\n\r\n    &:active {\r\n      background-color: hsl(0, 93%, 68%);\r\n    }\r\n  `}\r\n`;","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectTasks, toggleTaskDone, removeTask } from \"../tasksSlice\";\r\nimport { List, ListItem, TaskContent, Button } from \"./styled\";\r\n\r\nconst TaskList = () => {\r\n  const { tasks, hideDone } = useSelector(selectTasks)\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <List>\r\n      {tasks.map(task => (\r\n        <ListItem\r\n          key={task.id}\r\n          hidden={task.done && hideDone}\r\n        >\r\n          <Button\r\n            onClick={() => dispatch(toggleTaskDone(task.id))}\r\n          >\r\n            {task.done ? \"✓\" : \"\"}\r\n          </Button>\r\n          <TaskContent done={task.done}>\r\n            {task.content}\r\n          </TaskContent>\r\n          <Button\r\n            remove\r\n            onClick={() => dispatch(removeTask(task.id))}\r\n          >\r\n            🗑\r\n          </Button>\r\n        </ListItem>\r\n      ))}\r\n    </List>\r\n  );\r\n}\r\n\r\nexport default TaskList;","import styled from \"styled-components\";\r\n\r\nexport const StyledButtons = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-end;\r\n  flex-grow: 1;\r\n\r\n  @media (max-width:${({ theme }) => theme.breakpoints.small}px) {\r\n    flex-direction: column;\r\n    margin-bottom: 20px;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  border: none;\r\n  background-color: inherit;\r\n  color: ${({ theme }) => theme.colors.primaryColor};\r\n  padding: 10px 0;\r\n  margin: 0 0 0 20px;\r\n  transition: color 0.4s;\r\n\r\n  &:hover {\r\n    color: ${({ theme }) => theme.colors.hoverColor};\r\n    cursor: pointer;\r\n  }\r\n\r\n  &:disabled {\r\n    color: #888;\r\n  }\r\n`;","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectTasks, toggleHideDone, setAllDone } from \"../tasksSlice\";\r\nimport { StyledButtons, Button } from \"./styled\";\r\n\r\nconst Buttons = () => {\r\n  const { tasks, hideDone } = useSelector(selectTasks);\r\n  const dispatch = useDispatch();\r\n\r\n  if (tasks.length === 0) {\r\n    return null\r\n  };\r\n  return (\r\n    <StyledButtons>\r\n      <Button\r\n        onClick={() => dispatch(toggleHideDone())}\r\n        disabled={tasks.every(({ done }) => !done)}\r\n      >\r\n        {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n      </Button>\r\n      <Button\r\n        disabled={tasks.every(({ done }) => done)}\r\n        onClick={() => dispatch(setAllDone())}\r\n      >\r\n        Ukończ wszystkie\r\n      </Button>\r\n    </StyledButtons>\r\n  )\r\n};\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n  background-color: white;\r\n  box-shadow: 1px -1px 5px 0px #DDDDDD;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n  display: flex;\r\n  border-bottom: 1px solid #ddd;\r\n  margin-top: 10px;\r\n  padding: 0 20px;\r\n\r\n  @media (max-width:${({ theme }) => theme.breakpoints.small}px) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n  padding: 20px 0;\r\n  margin: 0;\r\n  font-size: 20px;\r\n`;","import { StyledSection, Header, Title } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n  <StyledSection>\r\n    <Header>\r\n      <Title>{title}</Title>\r\n      {extraHeaderContent}\r\n    </Header>\r\n    {body}\r\n  </StyledSection>\r\n);\r\n\r\nexport default Section;","import styled from \"styled-components\";\r\n\r\nexport const Title = styled.h1`\r\n  margin: 30px 0 20px;\r\n`;\r\n","import { Title } from \"./styled\";\r\n\r\nconst Header = ({ title }) => (\r\n  <header>\r\n    <Title>{title}</Title>\r\n  </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.main`\r\n  max-width: 850px;\r\n  margin: 0 auto;\r\n`;","import Form from \"./Form\";\nimport TaskList from \"./TaskList\";\nimport Buttons from \"./Buttons\";\nimport Section from \"../../common/Section\";\nimport Header from \"../../common/Header\";\nimport { Container } from \"../../common/Container\";\n\nconst Tasks = () => (\n  <Container>\n    <Header title=\"Lista zadań\" />\n    <Section\n      title=\"Dodaj nowe zadanie\"\n      body={<Form />}\n    />\n\n    <Section\n      title=\"Lista zadań\"\n      body={<TaskList />}\n      extraHeaderContent={<Buttons />}\n    />\n  </Container>\n);\n\nexport default Tasks;\n","import Tasks from \"./features/tasks/Tasks\";\r\n\r\nconst App = () => <Tasks />;\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    tasks: tasksReducer,\r\n  },\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GlobalStyle } from './globalStyles';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider } from 'styled-components';\nimport { theme } from \"./theme\";\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode >,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n  colors: {\r\n    primaryColor: \"hsl(180, 100%, 25%)\",\r\n    hoverColor: \"hsl(180, 100%, 30%)\",\r\n    activeColor: \"hsl(180, 100%, 35%)\"\r\n  },\r\n  breakpoints: {\r\n    medium: 768,\r\n    small: 540\r\n  }\r\n}"],"sourceRoot":""}