{"version":3,"sources":["globalStyles.js","features/tasks/TasksPage/Form/styled.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/TasksPage/Input/index.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/queryParameters.js","features/tasks/TasksPage/searchQueryParamName.js","features/tasks/TasksPage/TaskList/styled.js","features/tasks/TasksPage/TaskList/index.js","common/Section/styled.js","common/Section/index.js","common/Header/styled.js","common/Header/index.js","common/Container/index.js","features/tasks/TasksPage/Buttons/index.js","features/tasks/TasksPage/FormButtons/index.js","features/tasks/TasksPage/TaskListButtons/index.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/index.js","features/tasks/TaskPage/styled.js","features/tasks/TaskPage/index.js","common/Navigation/styled.js","common/Navigation/index.js","features/author/AuthorPage/styled.js","images/instagram.svg","features/author/AuthorPage/index.js","App.js","reportWebVitals.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","StyledForm","styled","form","theme","breakpoints","medium","Button","button","colors","primaryColor","hoverColor","activeColor","localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","loading","reducers","addTask","newTask","payload","push","toggleHideDone","state","toggleTaskDone","taskId","index","findIndex","task","id","done","removeTask","splice","setAllDone","fetchExampleTasks","fetchExampleTasksSuccess","fetchExampleTasksError","actions","selectTasksState","selectTasks","selectHideDone","selectIsEveryTaskDone","every","selectIsEveryTaskUndone","selectAreTasksEmpty","length","selectIsLoading","Input","input","Form","dispatch","useDispatch","useState","newTaskContent","setNewTaskContent","inputRef","useRef","onSubmit","event","preventDefault","trim","content","nanoid","addDate","Date","toLocaleString","value","onChange","target","placeholder","ref","autoFocus","onClick","current","focus","useQueryParameter","key","location","useLocation","URLSearchParams","search","get","searchQueryParamName","List","ul","ListItem","li","hidden","css","TaskContent","span","remove","StyledLink","Link","TaskList","query","useSelector","filter","toUpperCase","includes","selectTasksByQuery","map","to","StyledSection","section","StyledHeader","header","small","Title","h2","Section","title","body","extraHeaderContent","h1","Header","Container","main","StyledButtons","div","FormButtons","isLoading","disabled","TaskListButtons","isEveryTaskDone","isEveryTaskUndone","areTasksEmpty","Wrapper","Search","replaceQueryParameter","history","useHistory","searchParams","undefined","delete","set","pathname","toString","useReplaceQueryParameter","TasksPage","TaskPage","params","useParams","find","getTaskById","NavigationList","NavigationItem","StyledNavLink","NavLink","attrs","activeClassName","Navigation","Paragraph","p","IconContainer","LinkSocialMedia","a","Icon","img","LinkIcon","AuthorPage","href","rel","src","icon","alt","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getExampleTasks","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","delay","call","exampleTasks","exampleTasksWithIds","exampleTask","put","alert","select","takeLatest","type","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAEaA,EAAcC,YAAH,qQ,sCCAXC,EAAaC,IAAOC,KAAV,kIAID,qBAAGC,MAAkBC,YAAYC,UAK1CC,EAASL,IAAOM,OAAV,keACG,qBAAGJ,MAAkBK,OAAOC,gBAO5B,qBAAGN,MAAkBC,YAAYC,UAM/B,qBAAGF,MAAkBK,OAAOE,cAI5B,qBAAGP,MAAkBC,YAAYC,UAMjC,qBAAGF,MAAkBK,OAAOG,e,gBCnC9CC,EAAkB,QAEXC,EAA0B,SAAAC,GAAK,OAC5CC,aAAaC,QAAQJ,EAAiBK,KAAKC,UAAUJ,KCA/CK,EAAaC,YAAY,CAC7BC,KAAM,QACNC,aAAc,CACZR,MDAJG,KAAKM,MAAMR,aAAaS,QAAQZ,KAAqB,GCCjDa,UAAU,EACVC,SAAS,GAEXC,SAAU,CACRC,QAAS,cAAsC,IAAnCd,EAAkC,EAAlCA,MAAoBe,EAAc,EAAvBC,QACrBhB,EAAMiB,KAAKF,IAEbG,eAAgB,SAAAC,GACdA,EAAMR,UAAYQ,EAAMR,UAE1BS,eAAgB,cAAqC,IAAlCpB,EAAiC,EAAjCA,MAAoBqB,EAAa,EAAtBL,QACtBM,EAAQtB,EAAMuB,WAAU,SAAAC,GAAI,OAAIA,EAAKC,KAAOJ,KAClDrB,EAAMsB,GAAOI,MAAQ1B,EAAMsB,GAAOI,MAEpCC,WAAY,cAAqC,IAAlC3B,EAAiC,EAAjCA,MAAoBqB,EAAa,EAAtBL,QAClBM,EAAQtB,EAAMuB,WAAU,SAAAC,GAAI,OAAIA,EAAKC,KAAOJ,KAClDrB,EAAM4B,OAAON,EAAO,IAEtBO,WAAY,YAAgB,IAAD,EAAZ7B,EAAY,EAAZA,MAAY,cACNA,GADM,IACzB,2BAA0B,SACnB0B,MAAO,GAFW,gCAK3BI,kBAAmB,SAACX,GAClBA,EAAMP,SAAU,GAElBmB,yBAA0B,SAACZ,EAAD,GAAgC,IAAD,EAAZnB,EAAY,EAArBgB,SAClC,EAAAG,EAAMnB,OAAMiB,KAAZ,oBAAoBjB,IACpBmB,EAAMP,SAAU,GAElBoB,uBAAwB,SAACb,GACvBA,EAAMP,SAAU,MAMf,EASHP,EAAW4B,QARbnB,EADK,EACLA,QACAI,GAFK,EAELA,eACAE,GAHK,EAGLA,eACAO,GAJK,EAILA,WACAE,GALK,EAKLA,WACAC,GANK,EAMLA,kBACAC,GAPK,EAOLA,yBACAC,GARK,EAQLA,uBAGWE,GAAmB,SAAAf,GAAK,OAAIA,EAAMnB,OAClCmC,GAAc,SAAAhB,GAAK,OAAIe,GAAiBf,GAAOnB,OAC/CoC,GAAiB,SAAAjB,GAAK,OAAIe,GAAiBf,GAAOR,UAClD0B,GAAwB,SAAAlB,GAAK,OAAIgB,GAAYhB,GAAOmB,OAAM,qBAAGZ,SAC7Da,GAA0B,SAAApB,GAAK,OAAIgB,GAAYhB,GAAOmB,OAAM,qBAAGZ,SAC/Dc,GAAsB,SAAArB,GAAK,OAAkC,IAA9BgB,GAAYhB,GAAOsB,QAClDC,GAAkB,SAAAvB,GAAK,OAAwC,IAApCe,GAAiBf,GAAOP,SAejDP,KAAf,QC1EasC,GAAQxD,IAAOyD,MAAV,0F,QC+CHC,GA1CF,WACX,IAAMC,EAAWC,cAEjB,EAA4CC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACMC,EAAWC,iBAAO,MAsBxB,OACE,gBAAClE,EAAD,CAAYmE,SAjBO,SAACC,GACpBA,EAAMC,iBAEwB,KADAN,EAAeO,SAK7CV,EAAShC,EAAQ,CACf2C,QAASR,EACTvB,MAAM,EACND,GAAIiC,cACJC,SAAS,IAAIC,MAAOC,oBAEtBX,EAAkB,MAIlB,UACE,eAACP,GAAD,CACEmB,MAAOb,EACPc,SAAU,SAACT,GAAD,OAAWJ,EAAkBI,EAAMU,OAAOF,QACpDG,YAAY,wBACZC,IAAKf,EACLgB,WAAS,IAEX,eAAC3E,EAAD,CAAQ4E,QA7BO,WACjBjB,EAASkB,QAAQC,SA4Bf,+BCxCOC,GAAoB,SAACC,GAChC,IAAMC,EAAWC,cAKjB,OAJqB,IAAIC,gBAAgBF,EAASG,QAEvBC,IAAIL,ICJlBM,GAFc,SCGhBC,GAAO5F,IAAO6F,GAAV,0EAKJC,GAAW9F,IAAO+F,GAAV,mPAUjB,qBAAGC,QAAuBC,YAAJ,oDAKbC,GAAclG,IAAOmG,KAAV,mCACpB,qBAAG5D,MAAmB0D,YAAJ,oEAKT5F,GAASL,IAAOM,OAAV,gVAkBf,qBAAG8F,QAAuBH,YAAJ,iNAabI,GAAarG,YAAOsG,IAAPtG,CAAH,yIAMR,qBAAGE,MAAkBK,OAAOE,cCxB5B8F,GApCE,WACf,IAAMC,EAAQpB,GAAkBO,IAC1B9E,EAAQ4F,aAAY,SAAAzE,GAAK,ONyDC,SAACA,EAAOwE,GACxC,IAAM3F,EAAQmC,GAAYhB,GAE1B,OAAKwE,GAA0B,KAAjBA,EAAMnC,OAIbxD,EAAM6F,QAAO,qBAAGpC,QACbqC,cAAcC,SAASJ,EAAMnC,OAAOsC,kBAJrC9F,EM7D0BgG,CAAmB7E,EAAOwE,MACvDhF,EAAWiF,YAAYxD,IAEvBU,EAAWC,cAEjB,OACE,eAACgC,GAAD,UACG/E,EAAMiG,KAAI,SAAAzE,GAAI,OACb,gBAACyD,GAAD,CAEEE,OAAQ3D,EAAKE,MAAQf,EAFvB,UAIE,eAAC,GAAD,CACEyD,QAAS,kBAAMtB,EAAS1B,GAAeI,EAAKC,MAD9C,SAGGD,EAAKE,KAAO,SAAM,KAErB,eAAC2D,GAAD,CAAa3D,KAAMF,EAAKE,KAAxB,SACE,eAAC8D,GAAD,CAAYU,GAAE,mBAAc1E,EAAKC,IAAjC,SACGD,EAAKiC,YAGV,eAAC,GAAD,CACE8B,QAAM,EACNnB,QAAS,kBAAMtB,EAASnB,GAAWH,EAAKC,MAF1C,4BAbKD,EAAKC,UCfP0E,GAAgBhH,IAAOiH,QAAV,iGAKbC,GAAelH,IAAOmH,OAAV,qNAMH,qBAAGjH,MAAkBC,YAAYiH,SAM1CC,GAAQrH,IAAOsH,GAAV,kFCPHC,GAVC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAMC,EAAhB,EAAgBA,mBAAhB,OACd,gBAACV,GAAD,WACE,gBAACE,GAAD,WACE,eAACG,GAAD,UAAQG,IACPE,KAEFD,MCNQJ,GAAQrH,IAAO2H,GAAV,qHAGI,qBAAGzH,MAAkBC,YAAYiH,SCGxCQ,GANA,SAAC,GAAD,IAAGJ,EAAH,EAAGA,MAAH,OACb,kCACE,eAAC,GAAD,UAAQA,OCFCK,GAAY7H,IAAO8H,KAAV,oECATC,GAAgB/H,IAAOgI,IAAV,iNAMJ,qBAAG9H,MAAkBC,YAAYiH,SAM1C/G,GAASL,IAAOM,OAAV,sVAGR,qBAAGJ,MAAkBK,OAAOC,gBAM1B,qBAAGN,MAAkBK,OAAOE,cASnB,qBAAGP,MAAkBC,YAAYiH,SCbxCa,GAfK,WAClB,IAAMC,EAAYzB,YAAYlD,IACxBI,EAAWC,cACjB,OACE,eAACmE,GAAD,UACE,eAAC,GAAD,CACE9C,QAAS,kBAAMtB,EAAShB,OACxBwF,SAAUD,EAFZ,SAIGA,EAAY,oBAAiB,wCC2BvBE,GA7BS,WACtB,IAAM5G,EAAWiF,YAAYxD,IACvBoF,EAAkB5B,YAAYvD,IAC9BoF,EAAoB7B,YAAYrD,IAChCmF,EAAgB9B,YAAYpD,IAC5BM,EAAWC,cAEjB,OACE,eAACmE,GAAD,WACIQ,GACA,uCACE,gBAAC,GAAD,CACEtD,QAAS,kBAAMtB,EAAS5B,OACxBoG,SAAUG,EAFZ,UAIG9G,EAAW,aAAU,QAJxB,qBAMA,eAAC,GAAD,CACEyD,QAAS,kBAAMtB,EAASjB,OACxByF,SAAUE,EAFZ,yCC1BGG,GAAUxI,IAAOgI,IAAV,8DC0BLS,GAtBA,WACb,IAAMjC,EAAQpB,GAAkBO,IAC1B+C,EbGgC,WACtC,IAAMpD,EAAWC,cACXoD,EAAUC,cAchB,OAZ8B,SAAC,GAAoB,IAAlBvD,EAAiB,EAAjBA,IAAKV,EAAY,EAAZA,MAC9BkE,EAAe,IAAIrD,gBAAgBF,EAASG,aAEpCqD,IAAVnE,EACFkE,EAAaE,OAAO1D,GAEpBwD,EAAaG,IAAI3D,EAAKV,GAGxBgE,EAAQ7G,KAAR,UAAgBwD,EAAS2D,SAAzB,YAAqCJ,EAAaK,cahBtBC,GAS9B,OACE,eAACX,GAAD,UACE,eAAChF,GAAD,CACEsB,YAAY,kBACZH,MAAO6B,GAAS,GAChB5B,SAZgB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACvB6D,EAAsB,CACpBrD,IAAKM,GACLhB,MAA+B,KAAxBE,EAAOF,MAAMN,OAAgBQ,EAAOF,WAAQmE,UCqB1CM,GAzBG,WAEhB,OACE,gBAACvB,GAAD,WACE,eAAC,GAAD,CAAQL,MAAM,qBACd,eAAC,GAAD,CACEA,MAAM,qBACNC,KAAM,eAAC,GAAD,IACNC,mBAAoB,eAAC,GAAD,MAGtB,eAAC,GAAD,CACEF,MAAM,eACNC,KAAM,eAAC,GAAD,MAGR,eAAC,GAAD,CACED,MAAM,mBACNC,KAAM,eAAC,GAAD,IACNC,mBAAoB,eAAC,GAAD,UC1BfxB,GAAclG,IAAOgI,IAAV,8CCkCTqB,GA5BE,WACf,IAAMC,EAASC,cACTlH,EAAOoE,aAAY,SAAAzE,GAAK,OnBqDL,SAACA,EAAOE,GAAR,OAAmBc,GAAYhB,GAAOwH,MAAK,qBAAGlH,KAAgBJ,KmBrDrDuH,CAAYzH,EAAOsH,EAAOhH,OAE5D,OACE,gBAACuF,GAAD,WACE,eAAC,GAAD,CAAQL,MAAM,8BACd,eAAC,GAAD,CACEA,MAAOnF,EAAOA,EAAKiC,QAAU,yBAC7BmD,KACE,eAAC,GAAD,YACKpF,GACD,uCACE,+BACE,0DADF,IACqCA,EAAKE,KAAO,MAAQ,SAEzD,+BACE,wDAAqCF,EAAKmC,sBCtB/CkF,GAAiB1J,IAAO6F,GAAV,sPACN,qBAAG3F,MAAkBK,OAAOC,gBAO3B,qBAAGN,MAAkBC,YAAYiH,SAM1CuC,GAAiB3J,IAAO+F,GAAV,gDAId6D,GAAgB5J,YAAO6J,KAASC,OAAM,iBAAO,CACxDC,gBAAiB,YADU/J,CAAH,qKCNXgK,GAbI,kBACjB,+BACE,gBAACN,GAAD,WACE,eAACC,GAAD,UACE,eAACC,GAAD,CAAe7C,GAAG,WAAlB,uBAEF,eAAC4C,GAAD,UACE,eAACC,GAAD,CAAe7C,GAAG,SAAlB,+BCPKyB,GAAUxI,IAAOgI,IAAV,6CAIPiC,GAAYjK,IAAOkK,EAAV,6FAMTC,GAAgBnK,IAAOgI,IAAV,mDAIboC,GAAkBpK,IAAOqK,EAAV,4CAIfC,GAAOtK,IAAOuK,IAAV,4CAIJC,GAAWxK,IAAOqK,EAAV,qFCxBN,OAA0B,sCCoC1BI,GA9BI,kBACjB,gBAAC5C,GAAD,WACE,eAAC,GAAD,CAAQL,MAAM,cACd,eAAC,GAAD,CACEA,MAAM,SACNC,KACE,gBAAC,GAAD,WACE,gBAACwC,GAAD,gHAAwG,gEACxG,eAACA,GAAD,8OACA,gBAACE,GAAD,WACE,eAACC,GAAD,CACEM,KAAK,uCACLC,IAAI,sBACJ9F,OAAO,SAHT,SAKE,eAACyF,GAAD,CAAMM,IAAKC,GAAMC,IAAI,cAEvB,eAACN,GAAD,CACEE,KAAK,iDACLC,IAAI,sBACJ9F,OAAO,SAHT,kDCSGkG,GAzBH,kBACV,gBAAC,IAAD,WACE,eAAC,GAAD,IACA,gBAAC,IAAD,WACE,eAAC,IAAD,CAAOC,KAAK,eAAZ,SACE,eAAC,GAAD,MAEF,eAAC,IAAD,CAAOA,KAAK,WAAZ,SACE,eAAC,GAAD,MAEF,eAAC,IAAD,CAAOA,KAAK,SAAZ,SACE,eAAC,GAAD,MAEF,eAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,eAAC,IAAD,CAAUjE,GAAG,sBCTNkE,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,wDCPDQ,GAAe,yCAAG,6BAAArB,EAAA,sEACNsB,MAAM,uCADA,WACvBC,EADuB,QAGfC,GAHe,sBAIrB,IAAIC,MAAMF,EAASG,YAJE,uBAOhBH,EAASI,OAPO,mFAAH,qD,aCWlBC,I,aAgBAC,I,aAKOC,IArBjB,SAAUF,KAAV,0EAEI,OAFJ,kBAEUG,aAAM,KAFhB,OAGyB,OAHzB,SAG+BC,aAAKX,IAHpC,OASI,OANMY,EAHV,OAIUC,EAAsBD,EAAaxF,KAAI,SAAA0F,GAAW,oCACnDA,GADmD,IAEtDlK,GAAIiC,cACJC,SAAS,IAAIC,MAAOC,sBAP1B,SASU+H,aAAI7J,GAAyB2J,IATvC,+BAWI,OAXJ,oCAWUE,aAAI5J,MAXd,QAYI,OAZJ,UAYUwJ,aAAKK,MAAO,gCAZtB,uDAgBA,SAAUR,KAAV,wEACgB,OADhB,SACsBS,aAAO3J,IAD7B,OAEE,OADMnC,EADR,gBAEQwL,aAAKzL,EAAyBC,GAFtC,wCAKO,SAAUsL,KAAV,kEACL,OADK,SACCS,aAAWjK,GAAkBkK,KAAMZ,IADpC,OAEL,OAFK,SAECa,aAAU,IAAKZ,IAFhB,wC,iBC7BkBa,IAAV,SAAUA,KAAV,kEACb,OADa,SACPC,aAAI,CACRb,OAFW,wCCEf,IAAMc,GAAiBC,eAEjBC,GAAQC,YAAe,CAC3BC,QAAS,CACPxM,MAAOyM,IAETC,WAAY,CAACN,MAGfA,GAAeO,IAAIT,IAEJI,UCNfM,IAASC,OACP,eAAC,IAAMC,WAAP,UACE,eAAC,IAAD,CAAUR,MAAOA,GAAjB,SACE,gBAAC,IAAD,CAAejN,MCbA,CACnBK,OAAQ,CACNC,aAAc,sBACdC,WAAY,sBACZC,YAAa,uBAEfP,YAAa,CACXC,OAAQ,IACRgH,MAAO,MDKL,UACE,eAACvH,EAAD,IACA,eAAC,GAAD,WAIN+N,SAASC,eAAe,SAM1B5C,O","file":"static/js/main.a04f502d.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html {\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  *, ::after, ::before {\r\n    box-sizing: inherit;\r\n  }\r\n\r\n  body {\r\n    font-family: 'Montserrat', sans-serif;\r\n    background-color: #eee;\r\n    margin: 0;\r\n    overflow-y:scroll;\r\n  }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n  display: flex;\r\n  padding: 20px;\r\n\r\n  @media (max-width:${({ theme }) => theme.breakpoints.medium}px) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  background-color: ${({ theme }) => theme.colors.primaryColor};\r\n  color: white;\r\n  border: none;\r\n  padding: 10px;\r\n  margin-left: 20px;\r\n  transition: background-color 0.3s, transform 0.3s;\r\n\r\n  @media (max-width:${({ theme }) => theme.breakpoints.medium}px) {\r\n    margin-left: 0;\r\n    margin-top: 10px;\r\n  }\r\n\r\n  &:hover {\r\n    background-color: ${({ theme }) => theme.colors.hoverColor};\r\n    cursor: pointer;\r\n    transform: scale(1.1);\r\n\r\n    @media (max-width:${({ theme }) => theme.breakpoints.medium}px) {\r\n      transform: scale(1.05);\r\n    }\r\n  }\r\n\r\n  &:active {\r\n    background-color: ${({ theme }) => theme.colors.activeColor};\r\n  }\r\n`;\r\n","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = tasks => \r\nlocalStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocaleStorage = () => \r\nJSON.parse(localStorage.getItem(localStorageKey)) || [];","import { createSlice } from '@reduxjs/toolkit';\r\nimport { getTasksFromLocaleStorage } from './tasksLocalStorage';\r\n\r\nconst tasksSlice = createSlice({\r\n  name: 'tasks',\r\n  initialState: {\r\n    tasks: getTasksFromLocaleStorage(),\r\n    hideDone: false,\r\n    loading: false,\r\n  },\r\n  reducers: {\r\n    addTask: ({ tasks }, { payload: newTask }) => {\r\n      tasks.push(newTask);\r\n    },\r\n    toggleHideDone: state => {\r\n      state.hideDone = !state.hideDone;\r\n    },\r\n    toggleTaskDone: ({ tasks }, { payload: taskId }) => {\r\n      const index = tasks.findIndex(task => task.id === taskId);\r\n      tasks[index].done = !tasks[index].done;\r\n    },\r\n    removeTask: ({ tasks }, { payload: taskId }) => {\r\n      const index = tasks.findIndex(task => task.id === taskId);\r\n      tasks.splice(index, 1);\r\n    },\r\n    setAllDone: ({ tasks }) => {\r\n      for (const task of tasks) {\r\n        task.done = true\r\n      }\r\n    },\r\n    fetchExampleTasks: (state) => {\r\n      state.loading = true;\r\n    },\r\n    fetchExampleTasksSuccess: (state, { payload: tasks }) => {\r\n      state.tasks.push(...tasks);\r\n      state.loading = false;\r\n    },\r\n    fetchExampleTasksError: (state) => {\r\n      state.loading = false;\r\n    },\r\n\r\n  },\r\n});\r\n\r\nexport const {\r\n  addTask,\r\n  toggleHideDone,\r\n  toggleTaskDone,\r\n  removeTask,\r\n  setAllDone,\r\n  fetchExampleTasks,\r\n  fetchExampleTasksSuccess,\r\n  fetchExampleTasksError,\r\n} = tasksSlice.actions;\r\n\r\nexport const selectTasksState = state => state.tasks;\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectIsEveryTaskDone = state => selectTasks(state).every(({ done }) => done);\r\nexport const selectIsEveryTaskUndone = state => selectTasks(state).every(({ done }) => !done);\r\nexport const selectAreTasksEmpty = state => selectTasks(state).length === 0;\r\nexport const selectIsLoading = state => selectTasksState(state).loading === true;\r\n\r\nexport const getTaskById = (state, taskId) => selectTasks(state).find(({ id }) => id === taskId);\r\n\r\nexport const selectTasksByQuery = (state, query) => {\r\n  const tasks = selectTasks(state);\r\n\r\n  if (!query || query.trim() === \"\") {\r\n    return tasks;\r\n  }\r\n\r\n  return tasks.filter(({ content }) =>\r\n    content.toUpperCase().includes(query.trim().toUpperCase()))\r\n}\r\n\r\nexport default tasksSlice.reducer;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Input = styled.input`\r\n  flex-grow: 1;\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n`;","import { nanoid } from \"@reduxjs/toolkit\";\r\nimport { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { StyledForm, Button } from \"./styled\"\r\nimport { addTask } from \"../../tasksSlice\";\r\nimport { Input } from \"../Input\";\r\n\r\nconst Form = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n\r\n  const focusInput = () => {\r\n    inputRef.current.focus();\r\n  }\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    const trimmedNewTaskContent = newTaskContent.trim();\r\n    if (trimmedNewTaskContent === \"\") {\r\n      return;\r\n    };\r\n\r\n    dispatch(addTask({\r\n      content: newTaskContent,\r\n      done: false,\r\n      id: nanoid(),\r\n      addDate: new Date().toLocaleString(),\r\n    }))\r\n    setNewTaskContent(\"\");\r\n  };\r\n\r\n  return (\r\n    <StyledForm onSubmit={onFormSubmit}>\r\n      <Input\r\n        value={newTaskContent}\r\n        onChange={(event) => setNewTaskContent(event.target.value)}\r\n        placeholder=\"Co jest do zrobienia?\"\r\n        ref={inputRef}\r\n        autoFocus\r\n      />\r\n      <Button onClick={focusInput}>\r\n        Dodaj zadanie\r\n      </Button>\r\n    </StyledForm>\r\n  )\r\n};\r\n\r\nexport default Form;","import { useHistory, useLocation } from \"react-router-dom\";\r\n\r\nexport const useQueryParameter = (key) => {\r\n  const location = useLocation();\r\n  const searchParams = new URLSearchParams(location.search);\r\n\r\n  const query = searchParams.get(key);\r\n\r\n  return query;\r\n}\r\n\r\nexport const useReplaceQueryParameter = () => {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n\r\n  const replaceQueryParameter = ({ key, value }) => {\r\n    const searchParams = new URLSearchParams(location.search);\r\n\r\n    if (value === undefined) {\r\n      searchParams.delete(key);\r\n    } else {\r\n      searchParams.set(key, value);\r\n    };\r\n\r\n    history.push(`${location.pathname}?${searchParams.toString()}`);\r\n  }\r\n\r\n  return replaceQueryParameter;\r\n}","const searchQueryParamName = \"szukaj\";\r\n\r\nexport default searchQueryParamName;","import styled, { css } from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const List = styled.ul`\r\n  padding: 0 20px 20px;\r\n  margin-top: 20px;\r\n`;\r\n\r\nexport const ListItem = styled.li`\r\n  list-style-type: none;\r\n  border-bottom: 1px solid #ddd;\r\n  padding: 10px;\r\n  display: grid;\r\n  grid-template-columns: auto 1fr auto;\r\n  grid-gap: 10px;\r\n  align-items: center;\r\n  word-break: break-all;\r\n\r\n  ${({ hidden }) => hidden && css`\r\n    display:none;\r\n  `}\r\n`;\r\n\r\nexport const TaskContent = styled.span`\r\n  ${({ done }) => done && css`\r\n    text-decoration:line-through;\r\n  `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  height: 30px;\r\n  width: 30px;\r\n  background-color: hsl(120, 88%, 27%);\r\n  color: white;\r\n  justify-self: center;\r\n  border: none;\r\n  transition: 0.4s;\r\n\r\n  &:hover {\r\n  background-color: hsl(120, 88%, 32%);\r\n  cursor: pointer;\r\n  }\r\n\r\n  &:active {\r\n    background-color: hsl(120, 88%, 37%);\r\n  }\r\n\r\n  ${({ remove }) => remove && css`\r\n    background-color: hsl(0, 93%, 58%);\r\n\r\n    &:hover {\r\n      background-color: hsl(0, 93%, 63%);\r\n    }\r\n\r\n    &:active {\r\n      background-color: hsl(0, 93%, 68%);\r\n    }\r\n  `}\r\n`;\r\n\r\nexport const StyledLink = styled(Link)`\r\n  text-decoration:none;\r\n  color: #333;\r\n  transition: color 0.3s;\r\n\r\n  &:hover {\r\n      color: ${({ theme }) => theme.colors.hoverColor};\r\n    }\r\n`","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { toggleTaskDone, removeTask, selectHideDone, selectTasksByQuery } from \"../../tasksSlice\";\r\nimport { useQueryParameter } from \"../queryParameters\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\nimport { List, ListItem, TaskContent, Button, StyledLink } from \"./styled\";\r\n\r\nconst TaskList = () => {\r\n  const query = useQueryParameter(searchQueryParamName);\r\n  const tasks = useSelector(state => selectTasksByQuery(state, query));\r\n  const hideDone = useSelector(selectHideDone);\r\n  \r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <List>\r\n      {tasks.map(task => (\r\n        <ListItem\r\n          key={task.id}\r\n          hidden={task.done && hideDone}\r\n        >\r\n          <Button\r\n            onClick={() => dispatch(toggleTaskDone(task.id))}\r\n          >\r\n            {task.done ? \"✔\" : \"\"}\r\n          </Button>\r\n          <TaskContent done={task.done}>\r\n            <StyledLink to={`/zadania/${task.id}`}>\r\n              {task.content}\r\n            </StyledLink>\r\n          </TaskContent>\r\n          <Button\r\n            remove\r\n            onClick={() => dispatch(removeTask(task.id))}\r\n          >\r\n            🗑\r\n          </Button>\r\n        </ListItem>\r\n      ))}\r\n    </List>\r\n  );\r\n}\r\n\r\nexport default TaskList;","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n  background-color: white;\r\n  box-shadow: 1px -1px 5px 0px #DDDDDD;\r\n`;\r\n\r\nexport const StyledHeader = styled.header`\r\n  display: flex;\r\n  border-bottom: 1px solid #ddd;\r\n  margin-top: 10px;\r\n  padding: 0 20px;\r\n\r\n  @media (max-width:${({ theme }) => theme.breakpoints.small}px) {\r\n    flex-direction: column;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n  padding: 20px 0;\r\n  margin: 0;\r\n  font-size: 20px;\r\n`;","import { StyledSection, StyledHeader, Title } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n  <StyledSection>\r\n    <StyledHeader>\r\n      <Title>{title}</Title>\r\n      {extraHeaderContent}\r\n    </StyledHeader>\r\n    {body}\r\n  </StyledSection>\r\n);\r\n\r\nexport default Section;","import styled from \"styled-components\";\r\n\r\nexport const Title = styled.h1`\r\n  margin: 30px 0 20px;\r\n\r\n  @media (max-width:${({ theme }) => theme.breakpoints.small}px) {\r\n      text-align:center;\r\n    }\r\n`;\r\n","import { Title } from \"./styled\";\r\n\r\nconst Header = ({ title }) => (\r\n  <header>\r\n    <Title>{title}</Title>\r\n  </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.main`\r\n  max-width: 850px;\r\n  margin: 0 auto;\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const StyledButtons = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-end;\r\n  flex-grow: 1;\r\n\r\n  @media (max-width:${({ theme }) => theme.breakpoints.small}px) {\r\n    flex-direction: column;\r\n    margin-bottom: 20px;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  border: none;\r\n  background-color: inherit;\r\n  color: ${({ theme }) => theme.colors.primaryColor};\r\n  padding: 10px 0;\r\n  margin: 0 0 0 20px;\r\n  transition: color 0.4s;\r\n\r\n  &:hover {\r\n    color: ${({ theme }) => theme.colors.hoverColor};\r\n    cursor: pointer;\r\n  }\r\n\r\n  &:disabled {\r\n    color: #c0c0c5;\r\n    cursor: not-allowed;\r\n  }\r\n\r\n  @media (max-width:${({ theme }) => theme.breakpoints.small}px) {\r\n    margin: 0;\r\n  }\r\n`;\r\n","import { fetchExampleTasks, selectIsLoading } from \"../../tasksSlice\"\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Button, StyledButtons } from \"../Buttons\";\r\n\r\nconst FormButtons = () => {\r\n  const isLoading = useSelector(selectIsLoading);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <StyledButtons>\r\n      <Button\r\n        onClick={() => dispatch(fetchExampleTasks())}\r\n        disabled={isLoading}\r\n      >\r\n        {isLoading ? \"Ładowanie...\" : \"Pobierz przykładowe zadania\"}\r\n      </Button>\r\n    </StyledButtons>\r\n  );\r\n};\r\n\r\nexport default FormButtons;","import { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  toggleHideDone,\r\n  setAllDone,\r\n  selectIsEveryTaskDone,\r\n  selectIsEveryTaskUndone,\r\n  selectHideDone,\r\n  selectAreTasksEmpty,\r\n} from \"../../tasksSlice\";\r\nimport { Button, StyledButtons } from \"../Buttons\"\r\n\r\nconst TaskListButtons = () => {\r\n  const hideDone = useSelector(selectHideDone);\r\n  const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\r\n  const isEveryTaskUndone = useSelector(selectIsEveryTaskUndone);\r\n  const areTasksEmpty = useSelector(selectAreTasksEmpty);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <StyledButtons>\r\n      {!areTasksEmpty && (\r\n        <>\r\n          <Button\r\n            onClick={() => dispatch(toggleHideDone())}\r\n            disabled={isEveryTaskUndone}\r\n          >\r\n            {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n          </Button>\r\n          <Button\r\n            onClick={() => dispatch(setAllDone())}\r\n            disabled={isEveryTaskDone}\r\n          >\r\n            Ukończ wszystkie\r\n          </Button>\r\n        </>\r\n      )}\r\n    </StyledButtons>\r\n  )\r\n};\r\n\r\nexport default TaskListButtons;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  display:flex;\r\n  padding:20px;\r\n`","import { Input } from \"../Input\";\r\nimport { useQueryParameter, useReplaceQueryParameter } from \"../queryParameters\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\nimport { Wrapper } from \"./styled\";\r\n\r\n\r\nconst Search = () => {\r\n  const query = useQueryParameter(searchQueryParamName);\r\n  const replaceQueryParameter = useReplaceQueryParameter();\r\n\r\n  const onInputChange = ({ target }) => {\r\n    replaceQueryParameter({\r\n      key: searchQueryParamName,\r\n      value: target.value.trim() !== \"\" ? target.value : undefined,\r\n    })\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Input\r\n        placeholder=\"Filtruj zadania\"\r\n        value={query || \"\"}\r\n        onChange={onInputChange}\r\n      />\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default Search;","import Form from \"./Form\";\nimport TaskList from \"./TaskList\";\nimport Section from \"../../../common/Section\";\nimport Header from \"../../../common/Header\";\nimport { Container } from \"../../../common/Container\";\nimport FormButtons from \"./FormButtons\";\nimport TaskListButtons from \"./TaskListButtons\";\nimport Search from \"./Search\";\n\nconst TasksPage = () => {\n\n  return (\n    <Container>\n      <Header title=\"Lista zadań\" />\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={<Form />}\n        extraHeaderContent={<FormButtons />}\n      />\n\n      <Section\n        title=\"Wyszukiwarka\"\n        body={<Search />}\n      />\n\n      <Section\n        title=\"Lista zadań\"\n        body={<TaskList />}\n        extraHeaderContent={<TaskListButtons />}\n      />\n    </Container>\n  );\n}\n\nexport default TasksPage;\n","import styled from \"styled-components\";\r\n\r\nexport const TaskContent = styled.div`\r\n  padding: 20px;\r\n`;","import Section from \"../../../common/Section\";\r\nimport Header from \"../../../common/Header\";\r\nimport { Container } from \"../../../common/Container\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { getTaskById } from \"../tasksSlice\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { TaskContent } from \"./styled\";\r\n\r\nconst TaskPage = () => {\r\n  const params = useParams();\r\n  const task = useSelector(state => getTaskById(state, params.id));\r\n\r\n  return (\r\n    <Container>\r\n      <Header title=\"Szczegóły zadania\" />\r\n      <Section\r\n        title={task ? task.content : \"Nie znaleziono zadania\"}\r\n        body={\r\n          <TaskContent>\r\n            {!!task && (\r\n              <>\r\n                <p>\r\n                  <strong>Ukończono:&nbsp;</strong> {task.done ? \"Tak\" : \"Nie\"}\r\n                </p>\r\n                <p>\r\n                  <strong>Data dodania:&nbsp;</strong>{task.addDate}\r\n                </p>\r\n              </>\r\n            )}\r\n          </TaskContent>\r\n        }\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default TaskPage;\r\n","import styled from \"styled-components\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport const NavigationList = styled.ul`\r\n  background-color:${({ theme }) => theme.colors.primaryColor};\r\n  display:flex;\r\n  padding:16px 0;\r\n  margin:0;\r\n  justify-content:center;\r\n  list-style:none;\r\n\r\n  @media (max-width:${({ theme }) => theme.breakpoints.small}px) {\r\n      flex-direction: column;\r\n      align-items:center;\r\n    }\r\n`\r\n\r\nexport const NavigationItem = styled.li`\r\n  margin:6px 20px;\r\n`\r\n\r\nexport const StyledNavLink = styled(NavLink).attrs(() => ({\r\n  activeClassName: \"active\",\r\n}))`\r\n  text-decoration:none;\r\n  color:white;\r\n  \r\n  &.active{\r\n    font-weight:700;\r\n  }\r\n  \r\n  &:hover{\r\n    border-bottom: 1px solid;\r\n  }\r\n`","import { StyledNavLink, NavigationList, NavigationItem } from \"./styled\";\r\n\r\nconst Navigation = () => (\r\n  <nav>\r\n    <NavigationList>\r\n      <NavigationItem>\r\n        <StyledNavLink to=\"/zadania\">Zadania</StyledNavLink>\r\n      </NavigationItem>\r\n      <NavigationItem>\r\n        <StyledNavLink to=\"/autor\">O autorze</StyledNavLink>\r\n      </NavigationItem>\r\n    </NavigationList>\r\n  </nav>\r\n);\r\n\r\nexport default Navigation;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  padding:20px;\r\n`;\r\n\r\nexport const Paragraph = styled.p`\r\n  margin: 0 0 16px;\r\n  word-break: normal;\r\n  line-height: 1.5;\r\n`;\r\n\r\nexport const IconContainer = styled.div`\r\n  text-align: center;\r\n`;\r\n\r\nexport const LinkSocialMedia = styled.a`\r\ndisplay:block;\r\n`;\r\n\r\nexport const Icon = styled.img`\r\n  width: 40px;\r\n`;\r\n\r\nexport const LinkIcon = styled.a`\r\ncolor:#727171;\r\ntext-decoration: none;\r\nfont-size:15px;\r\n`\r\n\r\n","export default __webpack_public_path__ + \"static/media/instagram.8ff7ce92.svg\";","import Section from \"../../../common/Section\";\r\nimport Header from \"../../../common/Header\";\r\nimport { Container } from \"../../../common/Container\";\r\nimport { Wrapper, IconContainer, Icon, LinkSocialMedia, LinkIcon, Paragraph } from \"./styled\";\r\nimport icon from \"../../../images/instagram.svg\"\r\n\r\nconst AuthorPage = () => (\r\n  <Container>\r\n    <Header title=\"O autorze\" />\r\n    <Section\r\n      title=\"Witaj!\"\r\n      body={\r\n        <Wrapper>\r\n          <Paragraph>Nazywam się Paulina i pochodze z Lublina, ale mieszkam w Warszawie. Moim celem jest zostanie <strong>front-end developerem!</strong></Paragraph>\r\n          <Paragraph>W wolnym czasie lubię wędrować po górach, miastach, lasach i polach oraz piec ciastka. Zdarza mi się wstawić zdjęcia z tych wędrówek lub zdjęcia kota na Instagram 😉. </Paragraph>\r\n          <IconContainer>\r\n            <LinkSocialMedia\r\n              href=\"https://www.instagram.com/grymulska/\"\r\n              rel=\"noopener noreferrer\"\r\n              target=\"_blank\"\r\n            >\r\n              <Icon src={icon} alt=\"ig icon\" />\r\n            </LinkSocialMedia>\r\n            <LinkIcon\r\n              href=\"https://icons8.com/icon/Xy10Jcu1L2Su/instagram\"\r\n              rel=\"noopener noreferrer\"\r\n              target=\"_blank\">\r\n              Instagram icon by Icons8\r\n            </LinkIcon>\r\n          </IconContainer>\r\n        </ Wrapper>\r\n      }\r\n    />\r\n  </Container>\r\n);\r\n\r\nexport default AuthorPage;","import { HashRouter, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport TasksPage from \"./features/tasks/TasksPage\";\r\nimport TaskPage from \"./features/tasks/TaskPage\";\r\nimport Navigation from \"./common/Navigation\";\r\nimport AuthorPage from \"./features/author/AuthorPage\";\r\n\r\n\r\nconst App = () => (\r\n  <HashRouter>\r\n    <Navigation />\r\n    <Switch>\r\n      <Route path=\"/zadania/:id\">\r\n        <TaskPage />\r\n      </Route>\r\n      <Route path=\"/zadania\">\r\n        <TasksPage />\r\n      </Route>\r\n      <Route path=\"/autor\">\r\n        <AuthorPage />\r\n      </Route>\r\n      <Route path=\"/\">\r\n        <Redirect to=\"/zadania\" />\r\n      </Route>\r\n    </Switch>\r\n  </HashRouter>\r\n);\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const getExampleTasks = async () => {\r\n  const response = await fetch(\"/to-do-list-react/exampleTasks.json\");\r\n\r\n  if (!response.ok) {\r\n    throw new Error(response.statusText);\r\n  };\r\n\r\n  return await response.json();\r\n}","import { takeLatest, takeEvery, call, put, delay, select } from \"redux-saga/effects\";\r\nimport {\r\n  fetchExampleTasks,\r\n  selectTasks,\r\n  fetchExampleTasksSuccess,\r\n  fetchExampleTasksError\r\n} from \"./tasksSlice\";\r\nimport { getExampleTasks } from \"./getExampleTasks\"\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n  try {\r\n    yield delay(1000);\r\n    const exampleTasks = yield call(getExampleTasks);\r\n    const exampleTasksWithIds = exampleTasks.map(exampleTask => ({\r\n      ...exampleTask,\r\n      id: nanoid(),\r\n      addDate: new Date().toLocaleString()\r\n    }));\r\n    yield put(fetchExampleTasksSuccess(exampleTasksWithIds));\r\n  } catch (error) {\r\n    yield put(fetchExampleTasksError());\r\n    yield call(alert, \"Coś poszło nie tak\");\r\n  }\r\n};\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n  const tasks = yield select(selectTasks);\r\n  yield call(saveTasksInLocalStorage, tasks);\r\n};\r\n\r\nexport function* tasksSaga() {\r\n  yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n  yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n};\r\n","import { all } from \"redux-saga/effects\";\r\nimport { tasksSaga } from \"./features/tasks/tasksSaga\";\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    tasksSaga(),\r\n  ]);\r\n};","import { configureStore } from '@reduxjs/toolkit';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\nimport rootSaga from './rootSaga';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    tasks: tasksReducer,\r\n  },\r\n  middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GlobalStyle } from './globalStyles';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider } from 'styled-components';\nimport { theme } from \"./theme\";\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode >,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n  colors: {\r\n    primaryColor: \"hsl(180, 100%, 25%)\",\r\n    hoverColor: \"hsl(180, 100%, 30%)\",\r\n    activeColor: \"hsl(180, 100%, 35%)\"\r\n  },\r\n  breakpoints: {\r\n    medium: 768,\r\n    small: 540\r\n  }\r\n}"],"sourceRoot":""}